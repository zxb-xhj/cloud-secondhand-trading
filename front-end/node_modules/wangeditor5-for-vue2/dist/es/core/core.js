import clone from 'lodash.clonedeep';
import Vue from 'vue';
const EDITABLE_HANDLE = new WeakMap();
const TOOLBAR_HANDLE = new WeakMap();
/**
 * 实例与配置项间的关系
 */
export const INSTANCE_OPTION = new WeakMap();
/** 编辑器 与 Toolbar 间的映射关系 */
export const EDITABLE_TOOLBAR = new WeakMap();
/** Toolbar 与 编辑器 间的映射关系 */
export const TOOLBAR_EDITABLE = new WeakMap();
export const TIMER = new WeakMap();
export function getOption(inst) {
    const editable = INSTANCE_OPTION.get(inst);
    return {
        editable,
        toolbar: EDITABLE_TOOLBAR.get(editable),
    };
}
export function setTimer(option, fn) {
    let timer = TIMER.get(option);
    if (timer) {
        if (timer[1]) {
            clearTimeout(timer[1]);
            timer[1] = null;
        }
    }
    else {
        TIMER.set(option, (timer = [500 /* RELOAD */, null]));
    }
    if (fn) {
        timer[1] = setTimeout(() => {
            timer[1] = null;
            fn();
        }, timer[0]);
    }
}
/**
 * vue hook，在 WeEditable 组件中使用
 */
export function injectEditor(option, reload, clearContent, syncContent) {
    // 必须是 useWangEditor 函数创建的编辑区配置项
    if (!EDITABLE_TOOLBAR.has(option)) {
        throw new Error('You must use the Editable Opiton created by "useWangEditor" function!');
    }
    function reset() {
        var _a;
        const instance = reload();
        if (!instance)
            return;
        INSTANCE_OPTION.set(instance, option);
        const temp = EDITABLE_HANDLE.get(option);
        if (!temp) {
            EDITABLE_HANDLE.set(option, { instance, reload: reset });
        }
        else {
            temp.instance = instance;
        }
        // 自动重载 toolbar
        const toolbar = EDITABLE_TOOLBAR.get(option);
        if (toolbar) {
            const treload = (_a = TOOLBAR_HANDLE.get(toolbar)) === null || _a === void 0 ? void 0 : _a.reload;
            if (treload) {
                setTimer(toolbar);
                treload();
            }
        }
    }
    EDITABLE_HANDLE.set(option, { clearContent, syncContent, reload: reset });
    return reset;
}
/**
 * vue hook，在 WeToolbar 组件中使用
 */
export function injectToolbar(option, reload) {
    // 必须是 useWangEditor 函数创建的菜单栏配置项
    if (!TOOLBAR_EDITABLE.has(option)) {
        throw new Error('You must use the Toolbar Opiton created by "useWangEditor" function!');
    }
    function reset() {
        const editableOptions = TOOLBAR_EDITABLE.get(option);
        if (!editableOptions)
            return;
        const editable = EDITABLE_HANDLE.get(editableOptions);
        if (!editable || !editable.instance)
            return;
        const instance = reload(editable.instance);
        if (!instance)
            return;
        INSTANCE_OPTION.set(instance, option);
        const temp = TOOLBAR_HANDLE.get(option);
        if (!temp) {
            TOOLBAR_HANDLE.set(option, { instance, reload: reset });
        }
        else {
            temp.instance = instance;
        }
    }
    TOOLBAR_HANDLE.set(option, { reload: reset });
    return reset;
}
/**
 * vue hook，用于实现编辑器配置项的动态绑定
 * @param {Object} editableOption 编辑器主体部分的配置
 * @param {Object} toolbarOption 菜单栏配置
 * @param {Number} reloadDelay 防抖时长，用于重载的延迟控制，单位：毫秒
 */
export function useWangEditor(editableOption = null, toolbarOption = null, reloadDelay = 500 /* RELOAD */) {
    var _a;
    const t1 = editableOption ? clone(editableOption) : {};
    const editable = Vue.observable(Object.assign(Object.assign({ mode: 'default', defaultContent: null, delay: 3000 /* UPDATE */, extendCache: true }, t1), {
        config: Object.assign({ customPaste: undefined, hoverbarKeys: undefined, maxLength: undefined, scroll: true, placeholder: '', readOnly: false }, t1.config),
    }));
    const t2 = toolbarOption ? clone(toolbarOption) : {};
    const toolbar = Vue.observable({
        mode: (_a = t2.mode) !== null && _a !== void 0 ? _a : 'default',
        config: Object.assign({}, t2.config),
    });
    EDITABLE_TOOLBAR.set(editable, toolbar);
    TOOLBAR_EDITABLE.set(toolbar, editable);
    TIMER.set(editable, [reloadDelay, null]);
    TIMER.set(toolbar, [reloadDelay, null]);
    function getEditable(timeout) {
        var _a;
        if (typeof timeout !== 'number' || Number.isNaN(timeout)) {
            return (_a = EDITABLE_HANDLE.get(editable)) === null || _a === void 0 ? void 0 : _a.instance;
        }
        return new Promise((resolve, reject) => {
            const end = Date.now() + timeout;
            function get() {
                const inst = getEditable();
                if (inst) {
                    resolve(inst);
                }
                else if (Date.now() < end) {
                    requestAnimationFrame(get);
                }
                else {
                    reject(new Error(`unable to get the editable instance!`));
                }
            }
            requestAnimationFrame(get);
        });
    }
    function getToolbar(timeout) {
        var _a;
        if (typeof timeout !== 'number' || Number.isNaN(timeout)) {
            return (_a = TOOLBAR_HANDLE.get(toolbar)) === null || _a === void 0 ? void 0 : _a.instance;
        }
        return new Promise((resolve, reject) => {
            const end = Date.now() + timeout;
            function get() {
                const inst = getToolbar();
                if (inst) {
                    resolve(inst);
                }
                else if (Date.now() < end) {
                    requestAnimationFrame(get);
                }
                else {
                    reject(new Error(`unable to get the toolbar instance!`));
                }
            }
            requestAnimationFrame(get);
        });
    }
    /**
     * 清除富文本内容缓存
     */
    function clearContent() {
        var _a, _b;
        (_b = (_a = EDITABLE_HANDLE.get(editable)) === null || _a === void 0 ? void 0 : _a.clearContent) === null || _b === void 0 ? void 0 : _b.call(_a);
    }
    /**
     * 强制将数据同步到 v-model 上
     */
    function syncContent() {
        var _a, _b;
        (_b = (_a = EDITABLE_HANDLE.get(editable)) === null || _a === void 0 ? void 0 : _a.syncContent) === null || _b === void 0 ? void 0 : _b.call(_a);
    }
    /**
     * 重载编辑器（销毁重建)
     */
    function reloadEditor() {
        var _a;
        const reload = (_a = EDITABLE_HANDLE.get(editable)) === null || _a === void 0 ? void 0 : _a.reload;
        if (reload) {
            setTimer(toolbar);
            setTimer(editable);
            reload();
        }
    }
    return { editable, toolbar, getEditable, getToolbar, clearContent, syncContent, reloadEditor };
}
//# sourceMappingURL=core.js.map